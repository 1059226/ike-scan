$Id$

ike-scan - Discover and fingerprint IKE hosts

BUILDING AND INSTALLING:

ike-scan uses the standard GNU autoconf and automake tools, so installation
involves the normal unzip/untar, ./configure, make, make install process.

It should build on most modern Unix-like OSes.  It will not work on Windows,
sorry.  The program is known to build and run on Linux, FreeBSD, OpenBSD and
Solaris.  For more details see the section "SUPPORTED PLATFORMS" below.

For installation instructions, see the file INSTALL.

OVERVIEW:

ike-scan discovers IKE hosts and can also fingerprint them using the
retransmission backoff pattern.

The program sends IKE main mode requests to the specified hosts and displays
any responses that are received.  It handles retry and retransmission with
backoff to cope with packet loss.  It also limits the amount of bandwidth
used by the outbound IKE packets.

IKE is the Internet Key Exchange protocol which is the key exchange and
authentication mechanism used by IPsec.  Just about all modern VPN systems
implement IPsec, and the vast majority of IPsec VPNs use IKE for key exchange.

ike-scan can do two things:

a) Discovery: Determine which hosts are running IKE.
   This is done by displaying those hosts which respond to the IKE requests
   sent by ike-scan.

b) Fingerprinting: Determine which IKE implementation the hosts are using.
   This is done by recording the times of the IKE response packets from the
   target hosts and comparing the backoff pattern against known patterns.

USAGE:

Below is the output from "ike-scan --help".  Use ike-scan --help to display
information on the usage and options for your version.

ike-scan [options] [hosts...]

Hosts are specified on the command line unless the --file option is specified.

Options:

--help or -h		Display this usage message and exit.

--file=<fn> or -f <fn>	Read hostnames or addresses from the specified file
			instead of from the command line. One name or IP
			address per line.  Use "-" for standard input.

--sport=<p> or -s p	Set UDP source port to <p>, default=500, 0=random.
			Some IKE implementations require the client to use
			UDP source port 500 and will not talk to other ports.
			Note that superuser privileges are normally required
			to use non-zero source ports below 1024.  Also only
			one process on a system may bind to a given source port
			at any one time.

--dport=<p> or -d p	Set UDP destination port to <p>, default=500.
			UDP port 500 is the assigned port number for ISAKMP
			and this is the port used by most if not all IKE
			implementations.

--retry=<n> or -r n	Set total number of attempts per host to <n>,
			default=3.

--timeout=<n> or -t n	Set initial per host timeout to <n> ms, default=500.
			This timeout is for the first packet sent to each host.
			subsequent timeouts are multiplied by the backoff
			factor which is set with --backoff.

--interval=<n> or -i <n> Set minimum packet interval to <n> ms, default=75.
			This controls the outgoing bandwidth usage by limiting
			the rate at which packets can be sent.  The packet
			interval will be greater than or equal to this number
			and will be a multiple of the select wait specified
			with --selectwait.  Thus --interval=75 --selectwait=10
			will result in a packet interval of 80ms.
			The outgoing packets have a total size of 364 bytes
			(20 bytes IP hdr + 8 bytes UDP hdr + 336 bytes data)
			when the default transform set is used, or 112 bytes
			if a custom transform is specified.  Therefore
			for default transform set: 50=58240bps, 80=36400bps and
			for custom transform: 15=59733bps, 30=35840bps.

--backoff=<b> or -b <b>	Set timeout backoff factor to <b>, default=1.50.
			The per-host timeout is multiplied by this factor
			after each timeout.  So, if the number of retrys
			is 3, the initial per-host timeout is 500ms and the
			backoff factor is 1.5, then the first timeout will be
			500ms, the second 750ms and the third 1125ms.

--selectwait=<n> or -w <n> Set select wait to <n> ms, default=10.
			This controls the timeout used in the select(2) call.
			It defines the lower bound and granularity of the
			packet interval set with --interval.  Smaller values
			allow more accurate and lower packet intervals;
			larger values reduce CPU usage.  You don't need
			to change this unless you want to reduce the packet
			interval close to or below the default selectwait time.

--verbose or -v		Display verbose progress messages.
			Use more than once for greater effect:
			1 - Show when hosts are removed from the list and
			    when packets with invalid cookies are received.
			2 - Show each packet sent and received.
			3 - Display the host list before scanning starts.

--lifetime=<s> or -l <s> Set IKE lifetime to <s> seconds, default=28800.
			RFC 2407 specifies 28800 as the default, but some
			implementations may require different values.

--auth=<n> or -m <n>	Set auth. method to <n>, default=1 (pre-shared key).
			RFC defined values are 1 to 5.  See RFC 2409 Appendix A.

--version or -V		Display program version and exit.

--vendor=<v> or -e <v>	Set vendor id string to MD5 hash of <v>.
			Note: this is currently experimental.

--trans=<t> or -a <t>	Use custom transform <t> instead of default set.
			<t> is specified as enc,hash,auth,group. e.g. 2,3,1,5.
			See RFC 2409 Appendix A for details of which values
			to use.  For example, --trans=2,3,1,5 specifies
			Enc=IDEA-CBC, Hash=Tiger, Auth=shared key, DH Group=5
			If this option is specified, then only the single
			custom transform is used rather than the default set
			of 8 transforms.  As a result, the IP packet size
			is 112 bytes rather than the default of 364.

--showbackoff[=<n>] or -o[<n>]	Display the backoff fingerprint table.
			Display the backoff table to fingerprint the IKE
			implementation on the remote hosts.
			The optional argument specifies time to wait in seconds
			after receiving the last packet, default=60.
			If you are using the short form of the option (-o)
			then the value must immediately follow the option
			letter with no spaces, e.g. -o25 not -o 25.

--fuzz=<n> or -u <n>	Set pattern matching fuzz to <n> ms, default=100.
			This sets the maximum acceptable difference between
			the observed backoff times and the reference times in
			the backoff patterns file.  Larger values allow for
			higher variance but also increase the risk of
			false positive identifications.

Report bugs or send suggestions to ike-scan@nta-monitor.com
See the ike-scan homepage at http://www.nta-monitor.com/ike-scan/

IMPLEMENTATION DETAILS:

The hosts to scan can be specified on the command line or read from an
input file using the --file=<fn> option.  The program can cope with
large numbers of hosts limited only by the amount of memory needed to store
the list of host_entry structures.  Each host_entry structure requires 52
bytes on a 32-bit system, so a class B network (65534 hosts) would require
about 3.25 MB for the list.  The hosts can be specified as either IP
addresses or hostnames, however the program will store all hosts internally
as IP addresses and will only display IP addresses in the output (ike-scan
calls gethostbyname(3) to determine the IP address of each host).

The program limits the rate at which it sends IKE packets to ensure that
it does not overload the network connection.  By default the rate limit
is one packet every 80ms which equates to a data rate of 36400 bits per
second given the default packet size of 364 bytes.  For faster links, the
packet rate can be raised by lowering the minimum packet interval using
--interval=<n> which sets the minimum packet interval to n ms.  ike-scan
uses select(2) and gettimeofday(2) to implement the rate limiting.

ike-scan generates unique IKE cookies for each host, and it uses these
cookies to determine which host the response packets belong to.  Note that
it does not rely on the source IP address of the response packets because
it is possible for a response packet to be sent from a different IP address
than it was originally sent to.

ike-scan does not respond to any of the IKE responses it receives, so the
IKE main mode handshake will never complete.  Some IKE implementations do
not log handshakes that don't complete; these implementations will not
log the scanning and therefore the owners of these systems will not be
aware of the scanning.  It is possible to use ike-scan to determine if
a given implementation will log these scanning attempts if you have access
to the system logs.

By default, the main mode packets sent contain one proposal which contains
8 transforms.  These 8 transforms represent all possible combinations of:
a) Encryption Algorithm: DES-CBC and 3DES-CBC;
b) Hash Algorithm: MD5 and SHA; and
c) DH Group: 1 (MODP 768) and 2 (MODP 1024).

It is also possible to specify the Authentication Method with --auth
(default is 1 - pre-shared key) and the IKE lifetime in seconds with
--lifetime (default is 28800 seconds or 8 hours as recommended by RFC 2407).

This default transform set is designed to be acceptable to most IKE
implementations - most will accept at least one of the offered transforms.
However, it is often necessary to use a different authentication method
(pre-shared key is the most common, but is not always supported) and
more rarely it may be necessary to reduce the lifetime.

The default transform set results in a packet data length of 336 bytes which
when IP and UDP headers are added gives a total packet size of 364 bytes.

It is also possible to specify a single custom transform with
--trans=e,h,a,g where e is the Encryption Algorithm, h the Hash Algorithm,
a the Authentication Method and g is the DH Group.  These are specified as
values; see RFC 2409 Appendix A for details of which values to use.  For
example, --trans=2,3,1,5 would specify Enc=IDEA-CBC, Hash=Tiger, DH Group=5
(MODP 1536), Auth=1 (pre-shared key).

If a custom transform is specified, then only a single transform is used,
and the packet data length is 84 bytes for a total packet length of 112
bytes.  Specifying a custom transform also overrides authentication method
(either the default of pre-shared key or as specified with --auth).
However, it is still possible to change the IKE lifetime of the custom
transform with --lifetime.

A custom transform can be useful in the following situations:
a) If none of the transforms in the default transform set is acceptable to
   the remote IKE implementation;
b) If you know that a particular transform will be acceptable, and you want
   to minimise bandwidth use or allow faster scanning rates; or
c) If you want to determine exactly which transforms a remote IKE
   implementation supports for fingerprinting.

For those hosts that respond, ike-scan records the times of the received
IKE responses.  The backoff between IKE responses varies between different
IKE implementations and can therefore be used as a fingerprint.  The
--showbackoff option is used to display the backoff times for each host
which responded.  Note that using the --showbackoff option will cause ike-scan
to wait for 60 seconds after the last received packet to ensure that it has
seen all of the responses.  This 60 second wait can be altered by specifying
a different value in seconds to the --showbackoff option.

When all of the packets have been received, the backoff table is displayed,
and the program attempts to match the backoff pattern against the known
backoff patterns contained in the text file "ike-backoff-patterns".  Note
that only hosts which respond with a handshake can be fingerprinted by
backoff timings because notify messages are not repeated.

Note that ike-scan can also be used to fingerprint IKE hosts in other ways.
For example:

a) Some systems (such as Checkpoint Firewall-1) allow the use of any
source port (e.g. --sport=0) whereas others (e.g. Windows 2000) only
respond to IKE requests from source port 500 (actually, Windows 2000
responds to requests from any port, but always sends the responses back
to port 500 which amounts to the same thing).

b) Some systems (such as Checkpoint Firewall-1) use proprietary notify
message codes which allows them to be identified.

c) Different systems support different transforms, and this support
can be determined by trying all possible combinations with --trans.
Note however, that the user can usually change the transform set, so this
cannot be relied upon by itself.

d) By using another tool (e.g. tcpdump) to sniff the returned IKE packets,
the IP ID and IP TTL can be determined.  These can be useful in
fingerprinting the IP stack which can help to determine the IKE implementation.

If you discover IKE hosts with backoff patterns which are not recognised by
ike-scan, then you are encouraged to submit the pattern and details of
the IKE implementation to me at ike-scan@nta-monitor.com.  Note that by
submitting fingerprints, you are transferring copyright to me (Roy Hills)
so I can incorporate it into future versions of the software.

Note that any packet loss will prevent the backoff fingerprinting from working
because the program needs to see all of the responses.

PROGRAM OUTPUT:

The program output consists of two sections:

a) The IKE host detection section; and
b) The IKE backoff pattern section (if --showbackoff is specified).

The IKE host detection section contains one line for each host that
responds.  The response can either be a successful handshake or an
informational message.  Only the first packet returned by any given host
is displayed in this section.

Some examples of the IKE host detection section are:

10.1.46.98    IKE Handshake returned (1 transforms)
10.1.89.22    Notify message 14 (NO-PROPOSAL-CHOSEN)
10.1.89.189   (10.1.215.130) Notify message 9101 (No common authentication method with Firewall.)

In the above example output, host 10.1.46.98 has returned an IKE handshake,
10.1.89.22 has returned notify message 14 (decimal) which corresponds to
the RFC-defined error message "NO-PROPOSAL-CHOSEN" (see RFC 2408 section
3.14.1), and 10.1.89.189 has returned a non-standard notify message 9101
but the response has come from the IP address 10.1.215.130 rather than the
address which the request was sent to (presumably this is a multi-homed
system).  Notify message 9101 is not defined by RFC 2408, but it is known
to be a Checkpoint proprietary notify code (therefore the system is probably
Firewall-1) and the program displays the text included in the notify message.

Some examples of the IKE backoff pattern section are:

IP Address      No.     Recv time               Delta Time
172.16.2.2      1       1042549209.247980       0.000000
172.16.2.2      2       1042549211.239254       1.991274
172.16.2.2      3       1042549213.241935       2.002681
172.16.2.2      4       1042549215.244731       2.002796
172.16.2.2      5       1042549217.247512       2.002781
172.16.2.2      6       1042549219.250254       2.002742
172.16.2.2      7       1042549221.253044       2.002790
172.16.2.2      8       1042549225.258551       4.005507
172.16.2.2      9       1042549229.264074       4.005523
172.16.2.2      10      1042549233.269605       4.005531
172.16.2.2      11      1042549237.275145       4.005540
172.16.2.2      12      1042549241.280654       4.005509
172.16.2.2      Implementation guess: Firewall-1 4.1/NG

10.1.46.98	1       1042549209.426540       0.000000
10.1.46.98	2       1042549224.425435       14.998895
10.1.46.98	3       1042549239.422251       14.996816
10.1.46.98	Implementation guess: Cisco IOS / PIX

Here, host 172.16.2.2 returned a total of 12 packets and the
pattern matched "Firewall-1 4.1/NG", and host 10.1.46.98 returned
3 packets matching the pattern for "Cisco IOS / PIX".  The recv
time column shows the absolute time when the packet was received
in seconds and microseconds since the epoch; delta time shows the
elapsed time between packets in seconds and microseconds.

EXAMPLES:

1) ike-scan 172.16.2.2

The above example will run IKE detection against the single host 172.16.2.2.
No backoff fingerprinting will be done, and all options (timeouts, retrys,
transform set Etc) will be the default.

2) ike-scan --file=hostlist.txt

This will read the target hosts from the file "hostlist.txt".

3) cat hostlist.txt | ike-scan --file=- --showbackoff=20

This reads the hosts from stdin and performs both IKE detection and backoff
fingerprinting.  The backoff wait is specified as 20 seconds.

SUPPORTED PLATFORMS:

ike-scan has been built and tested on the following platforms:

Debian Linux 2.2 (Potato) with 2.2 Kernel
Debian Linux 3.0 (Woody) with 2.4 Kernel
FreeBSD 4.3 (gives warning "unsigned int format, u_long arg" but works OK)
OpenBSD 3.1
SPARC/Solaris 2.8 with gcc (gives warn "subscript has type `char'" but works OK)

It should work, or be capable of working, on any Unix-like system which
supports sockets and has the system calls malloc, gethostbyname, gettimeofday,
inet_ntoa, memset, select, socket, and strerror.

As this is the first time I've used the GNU autoconf & automake tools, it
may not be as portable as it could be.  If you use a platform which is
not listed above, I would be grateful if you could let me know if it compiles
or not.  The outputs from "./configure" and "make" would be helpful in the
cases where it doesn't work.  Mail to: ike-scan@nta-monitor.com.

FURTHER READING AND RFCS:

For an in-depth coverage of IPsec including IKE, I recommend the book
"IPsec The New Security Standard for the Internet, Intranets and Virtual
Private Networks" by Doraswamy and Harkins, ISBN 0-13-011898-2.

The following RFCs relate to IKE:

RFC 2407  The Internet IP Security Domain of Interpretation for ISAKMP
RFC 2408  Internet Security Association and Key Management Protocol (ISAKMP)
RFC 2409  The Internet Key Exchange (IKE)

All of these RFCs can be obtained from: http://www.ietf.org/rfc

CONTACT ADDRESS:

Please use the following Email address for any correspondence on ike-scan:

Roy Hills <ike-scan@nta-monitor.com>

I would like to hear from you if you have any of the following:

1.  A modern Unix-like OS which ike-scan won't build on;

2.  An OS not listed in the list above which ike-scan builds and runs OK on;

3.  Any IKE implementation patterns that are not already in the
    ike-backoff-patterns file.  Please include details of the pattern and
    also details of the IKE implementation; or

4.  Any comments or suggestions about the program.

